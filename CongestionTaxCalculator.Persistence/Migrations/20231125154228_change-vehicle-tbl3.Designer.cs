// <auto-generated />
using System;
using CongestionTaxCalculator.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTaxCalculator.Persistence.Migrations
{
    [DbContext(typeof(CongestionTaxCalculatorDbContext))]
    [Migration("20231125154228_change-vehicle-tbl3")]
    partial class changevehicletbl3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailableInBeforeHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableInDuringJuly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableInHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableInWeekend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSingleChargeRule")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxChargedInDuringFixedHours")
                        .HasColumnType("bit");

                    b.Property<double>("MaxTaxAmountPerDay")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.CongestionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CongestionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CongestionHistory");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.CongestionTaxRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CongestionTaxRules");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.Holiday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HolidayDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.TaxExemptVehicles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("VehicleId");

                    b.ToTable("TaxExemptVehicles");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentVehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentVehicleId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.CongestionHistory", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.Entity.City", "City")
                        .WithMany("CongestionHistories")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CongestionTaxCalculator.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("CongestionHistories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.CongestionTaxRule", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.Entity.City", "City")
                        .WithMany("CongestionTaxRules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.TaxExemptVehicles", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.Entity.City", "City")
                        .WithMany("TaxExemptVehicles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CongestionTaxCalculator.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany("TaxExemptVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.Vehicle", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.Entity.Vehicle", "ParentVehicle")
                        .WithMany()
                        .HasForeignKey("ParentVehicleId");

                    b.Navigation("ParentVehicle");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.City", b =>
                {
                    b.Navigation("CongestionHistories");

                    b.Navigation("CongestionTaxRules");

                    b.Navigation("TaxExemptVehicles");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entity.Vehicle", b =>
                {
                    b.Navigation("CongestionHistories");

                    b.Navigation("TaxExemptVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
